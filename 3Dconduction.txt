using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    class Program
    {
        public static double step_find(double dis, double step)
        {
            double step_dis = dis / (step - 1);
            return step;
        }
        public static double köşe (double dx, double dz)
        {
            dx = dx / 1000;
            dz = dz / 1000;
            double a = dx / 2 * dz / 2;
            return a;
        }
        public static double yatay_köprü(double dx, double dz)
        {
            dx = dx / 1000;
            dz = dz / 1000;
            double a = dx * dz / 2;

            return a;
        }
        public static double dikey_köprü(double dx, double dz)
        {
            dx = dx / 1000;
            dz = dz / 1000;
            double a = dx / 2 * dz;
            return a;
        }
        public static double orta(double dx, double dz)
        {
            dx = dx / 1000;
            dz = dz / 1000;
            double a = dx * dz;
            return a;
        }
        public static double q_flux(double Q, double x, double z)
        {
            x = x / 1000;
            z = z / 1000;
            double q = Q / (x * z);
            return q;
        }
        public static double xcond_small_area(double dy, double dz, double k, double dx, double T0, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            dz = dz / 1000;
            double q = -k * (dy / 2 * dz / 2) * ((T1 - T0) / dx);
            return q;
        }
        public static double xcond_medium_area1(double dy, double dz, double k, double dx, double T0, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            dz = dz / 1000;
            double q = -k * (dy * dz / 2) * ((T1 - T0) / dx);
            return q;
        }
        public static double xcond_medium_area2(double dy, double dz, double k, double dx, double T0, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            dz = dz / 1000;
            double q = -k * (dy / 2 * dz) * ((T1 - T0) / dx);
            return q;
        }
        public static double xcond_large_area(double dy, double dz, double k, double dx, double T0, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            dz = dz / 1000;
            double q = -k * (dy * dz) * ((T1 - T0) / dx);
            return q;
        }
        public static double ycond_small_area(double dx, double dz, double k, double dy, double T0, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            dz = dz / 1000;
            double q = -k * (dx / 2 * dz / 2) * ((T1 - T0) / dy);
            return q;
        }
        public static double ycond_medium_area1(double dx, double dz, double k, double dy, double T0, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            dz = dz / 1000;
            double q = -k * (dx * dz / 2) * ((T1 - T0) / dy);
            return q;
        }
        public static double ycond_medium_area2(double dx, double dz, double k, double dy, double T0, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            dz = dz / 1000;
            double q = -k * (dx / 2 * dz) * ((T1 - T0) / dy);
            return q;
        }
        public static double ycond_large_area(double dx, double dz, double k, double dy, double T0, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            dz = dz / 1000;
            double q = -k * (dx * dz) * ((T1 - T0) / dy);
            return q;
        }
        public static double zcond_small_area(double dx, double dy, double k, double dz, double T0, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            dz = dz / 1000;
            double q = -k * (dx / 2 * dy / 2) * ((T1 - T0) / dz);
            return q;
        }
        public static double zcond_medium_area1(double dx, double dy, double k, double dz, double T0, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            dz = dz / 1000;
            double q = -k * (dx * dy / 2) * ((T1 - T0) / dz);
            return q;
        }
        public static double zcond_medium_area2(double dx, double dy, double k, double dz, double T0, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            dz = dz / 1000;
            double q = -k * (dx / 2 * dy) * ((T1 - T0) / dz);
            return q;
        }
        public static double zcond_large_area(double dx, double dy, double k, double dz, double T0, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            dz = dz / 1000;
            double q = -k * (dx * dy) * ((T1 - T0) / dz);
            return q;
        }
        public static double xconv_small_area(double dy, double dz, double h, double TS, double T1)
        {
            dy = dy / 1000;
            dz = dz / 1000;
            double q = h * (dy / 2 * dz / 2) * (T1 - TS);
            return q;
        }
        public static double xconv_medium_area1(double dy, double dz, double h, double TS, double T1)
        {
            dy = dy / 1000;
            dz = dz / 1000;
            double q = h * (dy * dz / 2) * (T1 - TS);
            return q;
        }
        public static double xconv_medium_area2(double dy, double dz, double h, double TS, double T1)
        {
            dy = dy / 1000;
            dz = dz / 1000;
            double q = h * (dy / 2 * dz) * (T1 - TS);
            return q;
        }
        public static double xconv_large_area(double dy, double dz, double h, double TS, double T1)
        {
            dy = dy / 1000;
            dz = dz / 1000;
            double q = h * (dy * dz) * (T1 - TS);
            return q;
        }
        public static double zconv_small_area(double dx, double dy, double h, double TS, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            double q = h * (dx / 2 * dy / 2) * (T1 - TS);
            return q;
        }
        public static double zconv_medium_area1(double dx, double dy, double h, double TS, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            double q = h * (dx * dy / 2) * (T1 - TS);
            return q;
        }
        public static double zconv_medium_area2(double dx, double dy, double h, double TS, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            double q = h * (dx / 2 * dy) * (T1 - TS);
            return q;
        }
        public static double zconv_large_area(double dx, double dy, double h, double TS, double T1)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            double q = h * (dx * dy) * (T1 - TS);
            return q;
        }
        public static double yconv_small_area(double dx, double dz, double h, double TS, double T1)
        {
            dx = dx / 1000;
            dz = dz / 1000;
            double q = h * (dx / 2 * dz / 2) * (T1 - TS);
            return q;
        }
        public static double yconv_medium_area1(double dx, double dz, double h, double TS, double T1)
        {
            dx = dx / 1000;
            dz = dz / 1000;
            double q = h * (dx * dz / 2) * (T1 - TS);
            return q;
        }
        public static double yconv_medium_area2(double dx, double dz, double h, double TS, double T1)
        {
            dx = dx / 1000;
            dz = dz / 1000;
            double q = h * (dx / 2 * dz) * (T1 - TS);
            return q;
        }
        public static double yconv_large_area(double dx, double dz, double h, double TS, double T1)
        {
            dx = dx / 1000;
            dz = dz / 1000;
            double q = h * (dx * dz) * (T1 - TS);
            return q;
        }
        static double q_find(double q0, double q1, double q2, double q3, double q4)
        {
            double q = q0 + q1 + q2 - q3 - q4;
            return q;
        }
        static double y_small_area_tfind(double q, double k, double dx, double dy, double dz, double T0)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            dz = dz / 1000;
            double T1 = ((2 * 2 * q * dy) / (-k * dx * dz)) + T0;
            return T1;
        }
        static double y_medium_area_tfind(double q, double k, double dx, double dy, double dz, double T0)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            dz = dz / 1000;
            double T1 = ((2 * q * dy) / (-k * dx * dz)) + T0;
            return T1;
        }
        static double y_large_area_tfind(double q, double k, double dx, double dy, double dz, double T0)
        {
            dx = dx / 1000;
            dy = dy / 1000;
            dz = dz / 1000;
            double T1 = ((q * dy) / (-k * dx * dz)) + T0;
            return T1;
        }
        public static double t_next_köşe_x0y0z0(double k, double dx, double dy, double dz,double zerothbc, double firstbc, double secondbc, double T3, double T4, double T6)
        {
            double q0 = zerothbc;
            double q1 = firstbc;
            double q2 = secondbc;
            double q3 = xcond_small_area(dy, dz, k, dx, T6, T3);
            double q4 = zcond_small_area(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_small_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_köşe_x0y0zson(double k, double dx, double dy, double dz, double firstbc, double zerothbc, double fourthbc, double T2, double T3, double T6)
        {
            double q0 = zerothbc;
            double q1 = firstbc;
            double q2 = zcond_small_area(dx, dy, k, dz, T2, T6);
            double q3 = xcond_small_area(dy, dz, k, dx, T6, T3);
            double q4 = fourthbc;
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_small_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_köşe_xsony0z0(double h, double k, double dx, double dy, double dz, double zerothbc, double secondbc,double T1, double T4, double T6,double TS)
        {
            double q0 = zerothbc;
            double q1 = xcond_small_area(dy, dz, k, dz, T1, T6);
            double q2 = secondbc;
            double q3 = xconv_small_area(dy, dz, h, TS, T6);
            double q4 = zcond_small_area(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_small_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_köşe_xsony0zson(double h, double k, double dx, double dy, double dz, double zerothbc, double fourthbc, double T1, double T2, double T6, double TS)
        {
            double q0 = zerothbc;
            double q1 = xcond_small_area(dy, dz, k, dx, T1, T6);
            double q2 = zcond_small_area(dx, dy, k, dz, T2, T6);
            double q3 = xconv_small_area(dy, dz, h, TS, T6);
            double q4 = fourthbc;
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_small_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_köprü_y0z0(double k, double dx, double dy, double dz, double T1, double T3, double T4, double T6, double secondbc, double zerothbc)
        {
            double q0 = zerothbc;
            double q1 = xcond_small_area(dy, dz, k, dx, T1, T6);
            double q2 = secondbc;
            double q3 = xcond_small_area(dy, dz, k, dx, T6, T3);
            double q4 = zcond_medium_area1(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_medium_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_köprü_y0zson(double k, double dx, double dy, double dz, double T1, double T2, double T3, double T6, double fourthbc, double zerothbc)
        {
            double q0 = zerothbc;
            double q1 = xcond_small_area(dy, dz, k, dx, T1, T6);
            double q2 = zcond_medium_area1(dx, dy, k, dz, T2, T6);
            double q3 = xcond_small_area(dy, dz, k, dx, T6, T3);
            double q4 = fourthbc;
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_medium_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_köprü_x0y0(double k, double dx, double dy, double dz, double T2, double T3, double T4, double T6, double firstbc, double zerothbc)
        {
            double q0 = zerothbc;
            double q1 = firstbc;
            double q2 = zcond_small_area(dx, dy, k, dz, T2, T6);
            double q3 = xcond_medium_area2(dx, dz, k, dy, T6, T3);
            double q4 = zcond_small_area(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_medium_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_köprü_xsony0(double h, double k, double dx, double dy, double dz, double T1, double T2, double TS, double T4, double T6, double zerothbc)
        {
            double q0 = zerothbc;
            double q1 = xcond_medium_area2(dx,dz,k,dy,T1,T6);
            double q2 = zcond_small_area(dx, dy, k, dz, T2, T6);
            double q3 = xconv_medium_area2(dy, dz, h, TS, T6);
            double q4 = zcond_small_area(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_medium_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_orta_y0(double k, double dx, double dy, double dz, double T1, double T2, double T3, double T4, double T6, double zerothbc)
        {
            double q0 = zerothbc;
            double q1 = xcond_medium_area2(dy, dz, k, dx, T1, T6);
            double q2 = zcond_medium_area1(dx, dy, k, dz, T2, T6);
            double q3 = xcond_medium_area2(dy, dz, k, dx, T6, T3);
            double q4 = zcond_medium_area1(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_large_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_köşe_x0z0(double k, double dx, double dy, double dz, double T0, double firstbc, double secondbc, double T3, double T4, double T6)
        {
            double q0 = ycond_small_area(dx, dz, k, dy, T0, T6);
            double q1 = firstbc;
            double q2 = secondbc;
            double q3 = xcond_medium_area1(dy, dz, k, dx, T6, T3);
            double q4 = zcond_medium_area2(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_small_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_köşe_x0zson(double k, double dx, double dy, double dz, double firstbc, double T0, double fourthbc, double T2, double T3, double T6)
        {
            double q0 = ycond_small_area(dx, dz, k, dy, T0, T6);
            double q1 = firstbc;
            double q2 = zcond_medium_area2(dx, dy, k, dz, T2, T6);
            double q3 = xcond_medium_area1(dy, dz, k, dx, T6, T3);
            double q4 = fourthbc;
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_small_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_köşe_xsonz0(double h, double k, double dx, double dy, double dz, double T0, double secondbc, double T1, double T4, double T6, double TS)
        {
            double q0 = ycond_small_area(dx, dz, k, dy, T0, T6);
            double q1 = xcond_medium_area1(dy, dz, k, dx, T1, T6);
            double q2 = secondbc;
            double q3 = xconv_medium_area1(dy, dz, h, TS, T6);
            double q4 = zcond_medium_area2(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_small_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_köşe_xsonzson(double h, double k, double dx, double dy, double dz, double T0, double fourthbc, double T1, double T2, double T6, double TS)
        {
            double q0 = ycond_small_area(dx, dz, k, dy, T0, T6);
            double q1 = xcond_medium_area1(dy, dz, k, dz, T1, T6);
            double q2 = zcond_medium_area2(dx, dy, k, dz, T2, T6);
            double q3 = xconv_medium_area1(dy, dz, h, TS, T6);
            double q4 = fourthbc;
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_small_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_köprü_z0(double k, double dx, double dy, double dz, double T1, double T3, double T4, double T6, double secondbc, double T0)
        {
            double q0 = ycond_medium_area1(dx, dz, k, dy, T0, T6);
            double q1 = xcond_medium_area1(dy, dz, k, dx, T1, T6);
            double q2 = secondbc;
            double q3 = xcond_medium_area1(dy, dz, k, dx, T6, T3);
            double q4 = zcond_large_area(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_medium_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_köprü_zson(double k, double dx, double dy, double dz, double T1, double T2, double T3, double T6, double fourthbc, double T0)
        {
            double q0 = ycond_medium_area1(dx, dz, k, dy, T0, T6);
            double q1 = xcond_medium_area1(dy, dz, k, dx, T1, T6);
            double q2 = zcond_large_area(dx, dy, k, dz, T2, T6);
            double q3 = xcond_medium_area1(dy, dz, k, dx, T6, T3);
            double q4 = fourthbc;
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_medium_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_köprü_x0(double k, double dx, double dy, double dz, double T2, double T3, double T4, double T6, double firstbc, double T0)
        {
            double q0 = ycond_medium_area2(dx, dz, k, dy, T0, T6);
            double q1 = firstbc;
            double q2 = zcond_medium_area2(dx, dy, k, dz, T2, T6);
            double q3 = xcond_large_area(dy, dz, k, dx, T6, T3);
            double q4 = zcond_medium_area2(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_medium_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_köprü_xson(double h, double k, double dx, double dy, double dz, double T1, double T2, double TS, double T4, double T6, double T0)
        {
            double q0 = ycond_medium_area2(dx, dz, k, dy, T0, T6);
            double q1 = xcond_large_area(dy, dz, k, dx, T1, T6);
            double q2 = zcond_medium_area2(dx, dy, k, dz, T2, T6);
            double q3 = xconv_large_area(dy, dz, h, TS, T6);
            double q4 = zcond_medium_area2(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_medium_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double t_next_orta(double k, double dx, double dy, double dz, double T1, double T2, double T3, double T4, double T6, double T0)
        {
            double q0 = ycond_large_area(dx, dz, k, dy, T0, T6);
            double q1 = xcond_large_area(dy, dz, k, dx, T1, T6);
            double q2 = zcond_large_area(dx, dy, k, dz, T2, T6);
            double q3 = xcond_large_area(dy, dz, k, dx, T6, T3);
            double q4 = zcond_large_area(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            double t_next = y_large_area_tfind(q5, k, dx, dy, dz, T6);
            return t_next;
        }
        public static double q_atılan_köşe_x0ysonz0(double k, double dx, double dy, double dz, double T0, double firstbc, double secondbc, double T3, double T4, double T6)
        {
            double q0 = ycond_small_area(dx, dz, k, dy, T0, T6);
            double q1 = firstbc;
            double q2 = secondbc;
            double q3 = xcond_small_area(dy, dz, k, dx, T6, T3);
            double q4 = zcond_small_area(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            return q5;
        }
        public static double q_atılan_köşe_x0ysonzson(double k, double dx, double dy, double dz, double firstbc, double T0, double fourthbc, double T2, double T3, double T6)
        {
            double q0 = ycond_small_area(dx, dz, k, dy, T0, T6);
            double q1 = firstbc;
            double q2 = zcond_small_area(dx, dy, k, dz, T2, T6);
            double q3 = xcond_small_area(dy, dz, k, dx, T6, T3);
            double q4 = fourthbc;
            double q5 = q_find(q0, q1, q2, q3, q4);
            return q5;
        }
        public static double q_atılan_köşe_xsonysonz0(double h, double k, double dx, double dy, double dz, double T0, double secondbc, double T1, double T4, double T6, double TS)
        {
            double q0 = ycond_small_area(dx, dz, k, dy, T0, T6);
            double q1 = xcond_small_area(dy, dz, k, dz, T1, T6);
            double q2 = secondbc;
            double q3 = xconv_small_area(dy, dz, h, TS, T6);
            double q4 = zcond_small_area(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            return q5;
        }
        public static double q_atılan_köşe_xsonysonzson(double h, double k, double dx, double dy, double dz, double T0, double fourthbc, double T1, double T2, double T6, double TS)
        {
            double q0 = ycond_small_area(dx, dz, k, dy, T0, T6);
            double q1 = xcond_small_area(dy, dz, k, dx, T1, T6);
            double q2 = zcond_small_area(dx, dy, k, dz, T2, T6);
            double q3 = xconv_small_area(dy, dz, h, TS, T6);
            double q4 = fourthbc;
            double q5 = q_find(q0, q1, q2, q3, q4);
            return q5;
        }
        public static double q_atılan_köprü_ysonz0(double k, double dx, double dy, double dz, double T1, double T3, double T4, double T6, double secondbc, double T0)
        {
            double q0 = ycond_medium_area1(dx, dz, k, dy, T0, T6);
            double q1 = xcond_small_area(dy, dz, k, dx, T1, T6);
            double q2 = secondbc;
            double q3 = xcond_small_area(dy, dz, k, dx, T6, T3);
            double q4 = zcond_medium_area1(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            return q5;
        }
        public static double q_atılan_köprü_ysonzson(double k, double dx, double dy, double dz, double T1, double T2, double T3, double T6, double fourthbc, double T0)
        {
            double q0 = ycond_medium_area1(dx, dz, k, dy, T0, T6);
            double q1 = xcond_small_area(dy, dz, k, dx, T1, T6);
            double q2 = zcond_medium_area1(dx, dy, k, dz, T2, T6);
            double q3 = xcond_small_area(dy, dz, k, dx, T6, T3);
            double q4 = fourthbc;
            double q5 = q_find(q0, q1, q2, q3, q4);
            return q5;
        }
        public static double q_atılan_köprü_x0yson(double k, double dx, double dy, double dz, double T2, double T3, double T4, double T6, double firstbc, double T0)
        {
            double q0 = ycond_medium_area2(dx, dz, k, dy, T0, T6);
            double q1 = firstbc;
            double q2 = zcond_small_area(dx, dy, k, dz, T2, T6);
            double q3 = xcond_medium_area2(dx, dz, k, dy, T6, T3);
            double q4 = zcond_small_area(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            return q5;
        }
        public static double q_atılan_köprü_xsonyson(double h, double k, double dx, double dy, double dz, double T1, double T2, double TS, double T4, double T6, double T0)
        {
            double q0 = ycond_medium_area2(dx, dz, k, dy, T0, T6);
            double q1 = xcond_medium_area2(dx, dz, k, dy, T1, T6);
            double q2 = zcond_small_area(dx, dy, k, dz, T2, T6);
            double q3 = xconv_medium_area2(dy, dz, h, TS, T6);
            double q4 = zcond_small_area(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            return q5;
        }
        public static double q_atılan_orta_yson(double k, double dx, double dy, double dz, double T1, double T2, double T3, double T4, double T6, double T0)
        {
            double q0 = ycond_large_area(dx, dz, k, dy, T0, T6);
            double q1 = xcond_medium_area2(dy, dz, k, dx, T1, T6);
            double q2 = zcond_medium_area1(dx, dy, k, dz, T2, T6);
            double q3 = xcond_medium_area2(dy, dz, k, dx, T6, T3);
            double q4 = zcond_medium_area1(dx, dy, k, dz, T6, T4);
            double q5 = q_find(q0, q1, q2, q3, q4);
            return q5;
        }
        static void Main(string[] args)
        {
            StreamReader sınırkosulu = new StreamReader("C:\\Users\\Sinan\\Desktop\\Visual Studio\\3D_heatt\\sınırkosulu.inf");
            string oku = sınırkosulu.ReadToEnd();
            sınırkosulu.Close();
            sınırkosulu.Dispose();
            string[] sınır_kosulu = oku.Split(';');
            int k_cons = Convert.ToInt16(sınır_kosulu[1]);
            int zerothbc = Convert.ToInt16(sınır_kosulu[3]);
            int firstbc = Convert.ToInt16(sınır_kosulu[5]);
            int secondbc = Convert.ToInt16(sınır_kosulu[7]);
            int thirdbc = Convert.ToInt16(sınır_kosulu[9]);
            int fourthbc = Convert.ToInt16(sınır_kosulu[11]);
            int fifthbc = Convert.ToInt16(sınır_kosulu[13]);
            int T_surr = Convert.ToInt16(sınır_kosulu[15]);
            StreamReader bölme = new StreamReader("C:\\Users\\Sinan\\Desktop\\Visual Studio\\3D_heatt\\node.inf");
            string oku1 = bölme.ReadToEnd();
            bölme.Close();
            bölme.Dispose();
            string[] node = oku1.Split(';');
            int x_step = Convert.ToInt16(node[1]);
            int x_dis = Convert.ToInt16(node[3]);
            int y_step = Convert.ToInt16(node[5]);
            int y_dis = Convert.ToInt16(node[7]);
            int z_step = Convert.ToInt16(node[9]);
            int z_dis = Convert.ToInt16(node[11]);
            double dx = x_dis / (x_step - 1);
            double dy = y_dis / (y_step - 1);
            double dz = z_dis / (z_step - 1);
            StreamReader num = new StreamReader("C:\\Users\\Sinan\\Desktop\\Visual Studio\\3D_heatt\\numeric.inf");
            string oku2 = num.ReadToEnd();
            num.Close();
            num.Dispose();
            string[] numeric = oku2.Split(';');
            double rexx = Convert.ToDouble(numeric[1]);
            double min_err = Convert.ToDouble(numeric[3]);
            double[,,] T = new double[x_step, y_step, z_step];
            double[,,] q_initial = new double[x_step, y_step, z_step];
            double[,] q_atılan = new double[x_step, z_step];
            double[,] conv_atılan = new double[x_step, z_step];
            double[,] err = new double[x_step, z_step];
            double[,] corr = new double[x_step, z_step];
            double q_akı = q_flux(zerothbc, x_dis, z_dis);
            //Console.WriteLine(q_akı);
            int iter = 0;
            int x_line = 0;
            int y_line = 0;
            int z_line = 0;
            while (true)
            {
                if (z_line == 0)
                {
                    if (x_line == 0)
                    {
                        q_initial[x_line, y_line, z_line] = q_akı * köşe(dx, dz);
                        //Console.WriteLine("q" + "[" + x_line + "," + y_line + "," + z_line + "]" + "ısı   " + q_initial[x_line, y_line, z_line]);
                        //Console.WriteLine("T" + "[" + x_line + "," + y_line + "," + z_line + "]" + " sıcaklığı tahmin edin");
                        //T[x_line, y_line, z_line] = Convert.ToDouble(Console.ReadLine());
                        T[x_line, y_line, z_line] = 180;
                        x_line = x_line + 1;
                    }
                    else if (x_line < x_step - 1)
                    {
                        q_initial[x_line, y_line, z_line] = q_akı * yatay_köprü(dx, dz);
                        //Console.WriteLine("q" + "[" + x_line + "," + y_line + "," + z_line + "]" + "ısı   " + q_initial[x_line, y_line, z_line]);
                        //Console.WriteLine("T" + "[" + x_line + "," + y_line + "," + z_line + "]" + " sıcaklığı tahmin edin");
                        //T[x_line, y_line, z_line] = Convert.ToDouble(Console.ReadLine());
                        T[x_line, y_line, z_line] = 180;
                        x_line = x_line + 1;
                    }
                    else if (x_line == x_step - 1)
                    {
                        q_initial[x_line, y_line, z_line] = q_akı * köşe(dx, dz);
                        //Console.WriteLine("q" + "[" + x_line + "," + y_line + "," + z_line + "]" + "ısı   " + q_initial[x_line, y_line, z_line]);
                        //Console.WriteLine("T" + "[" + x_line + "," + y_line + "," + z_line + "]" + " sıcaklığı tahmin edin");
                        //T[x_line, y_line, z_line] = Convert.ToDouble(Console.ReadLine());
                        T[x_line, y_line, z_line] = 180;
                        x_line = 0;
                        z_line = z_line + 1;
                    }
                }
                else if(z_line!=0 && z_line < z_step - 1)
                {
                    if (x_line == 0)
                    {
                        q_initial[x_line, y_line, z_line] = q_akı * dikey_köprü(dx, dz);
                        //Console.WriteLine("q" + "[" + x_line + "," + y_line + "," + z_line + "]" + "ısı   " + q_initial[x_line, y_line, z_line]);
                        //Console.WriteLine("T" + "[" + x_line + "," + y_line + "," + z_line + "]" + " sıcaklığı tahmin edin");
                        //T[x_line, y_line, z_line] = Convert.ToDouble(Console.ReadLine());
                        T[x_line, y_line, z_line] = 180;
                        x_line = x_line + 1;
                    }
                    else if (x_line < x_step - 1)
                    {
                        q_initial[x_line, y_line, z_line] = q_akı * orta(dx, dz);
                        //Console.WriteLine("q" + "[" + x_line + "," + y_line + "," + z_line + "]" + "ısı   " + q_initial[x_line, y_line, z_line]);
                        //Console.WriteLine("T" + "[" + x_line + "," + y_line + "," + z_line + "]" + " sıcaklığı tahmin edin");
                        //T[x_line, y_line, z_line] = Convert.ToDouble(Console.ReadLine());
                        T[x_line, y_line, z_line] = 180;
                        x_line = x_line + 1;
                    }
                    else if (x_line == x_step - 1)
                    {
                        q_initial[x_line, y_line, z_line] = q_akı * dikey_köprü(dx, dz);
                        //Console.WriteLine("q" + "[" + x_line + "," + y_line + "," + z_line + "]" + "ısı   " + q_initial[x_line, y_line, z_line]);
                        //Console.WriteLine("T" + "[" + x_line + "," + y_line + "," + z_line + "]" + " sıcaklığı tahmin edin");
                        //T[x_line, y_line, z_line] = Convert.ToDouble(Console.ReadLine());
                        T[x_line, y_line, z_line] = 180;
                        x_line = 0;
                        z_line = z_line + 1;
                    }
                }
                else if (z_line == z_step - 1)
                {
                    if (x_line == 0)
                    {
                        q_initial[x_line, y_line, z_line] = q_akı * köşe(dx, dz);
                        //Console.WriteLine("q" + "[" + x_line + "," + y_line + "," + z_line + "]" + "ısı   " + q_initial[x_line, y_line, z_line]);
                        //Console.WriteLine("T" + "[" + x_line + "," + y_line + "," + z_line + "]" + " sıcaklığı tahmin edin");
                        //T[x_line, y_line, z_line] = Convert.ToDouble(Console.ReadLine());
                        T[x_line, y_line, z_line] = 180;
                        x_line = x_line + 1;
                    }
                    else if (x_line < x_step - 1)
                    {
                        q_initial[x_line, y_line, z_line] = q_akı * yatay_köprü(dx, dz);
                        //Console.WriteLine("q" + "[" + x_line + "," + y_line + "," + z_line + "]" + "ısı   " + q_initial[x_line, y_line, z_line]);
                        //Console.WriteLine("T" + "[" + x_line + "," + y_line + "," + z_line + "]" + " sıcaklığı tahmin edin");
                        //T[x_line, y_line, z_line] = Convert.ToDouble(Console.ReadLine());
                        T[x_line, y_line, z_line] = 180;
                        x_line = x_line + 1;
                    }
                    else if (x_line == x_step - 1)
                    {
                        q_initial[x_line, y_line, z_line] = q_akı * köşe(dx, dz);
                        //Console.WriteLine("q" + "[" + x_line + "," + y_line + "," + z_line + "]" + "ısı   " + q_initial[x_line, y_line, z_line]);
                        //Console.WriteLine("T" + "[" + x_line + "," + y_line + "," + z_line + "]" + " sıcaklığı tahmin edin");
                        //T[x_line, y_line, z_line] = Convert.ToDouble(Console.ReadLine());
                        T[x_line, y_line, z_line] = 180;
                        x_line = x_line + 1;
                        z_line = z_line + 1;
                    }
                }
                else if (z_line == z_step && x_line == x_step)
                {
                    break;
                }
            }
            while (true)
            {
                x_line = 0;
                y_line = 0;
                z_line = 0;
                Console.WriteLine(iter + ". iterasyon");
                iter = iter + 1;
                while (true)
                {
                    if (y_line == 0)
                    {
                        if (z_line == 0)
                        {
                            if (x_line == 0)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köşe_x0y0z0(k_cons, dx, dy, dz, q_initial[x_line, y_line, z_line], firstbc, secondbc, T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line]);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = x_line + 1;
                            }
                            else if (x_line == x_step - 1)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köşe_xsony0z0(thirdbc, k_cons, dx, dy, dz, q_initial[x_line, y_line, z_line], secondbc, T[x_line - 1, y_line, z_line], T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line], T_surr);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = 0;
                                z_line = z_line + 1;
                            }
                            else if (x_line != 0 && x_line < x_step - 1)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köprü_y0z0(k_cons, dx, dy, dz, T[x_line - 1, y_line, z_line], T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line], secondbc, q_initial[x_line, y_line, z_line]);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = x_line + 1;
                            }
                        }
                        else if (z_line != 0 && z_line < z_step - 1)
                        {
                            if (x_line == 0)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köprü_x0y0(k_cons, dx, dy, dz, T[x_line, y_line, z_line - 1], T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line], firstbc, q_initial[x_line, y_line, z_line]);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = x_line + 1;
                            }
                            else if (x_line != 0 && x_line < x_step - 1)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_orta_y0(k_cons, dx, dy, dz, T[x_line - 1, y_line, z_line], T[x_line, y_line, z_line - 1], T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line], q_initial[x_line, y_line, z_line]);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = x_line + 1;
                            }
                            else if (x_line == x_step - 1)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köprü_xsony0(thirdbc, k_cons, dx, dy, dz, T[x_line - 1, y_line, z_line], T[x_line, y_line, z_line - 1], T_surr, T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line], q_initial[x_line, y_line, z_line]);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = 0;
                                z_line = z_line + 1;
                            }
                        }
                        else if (z_line == z_step - 1)
                        {
                            if (x_line == 0)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köşe_x0y0zson(k_cons, dx, dy, dz, firstbc, q_initial[x_line, y_line, z_line], fourthbc, T[x_line, y_line, z_line - 1], T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line]);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = x_line + 1;
                            }
                            else if (x_line != 0 && x_line < x_step - 1)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köprü_y0zson(k_cons, dx, dy, dz, T[x_line - 1, y_line, z_line], T[x_line, y_line, z_line - 1], T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line], fourthbc, q_initial[x_line, y_line, z_line]);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = x_line + 1;
                            }
                            else if (x_line == x_step - 1)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köşe_xsony0zson(thirdbc, k_cons, dx, dy, dz, q_initial[x_line, y_line, z_line], fourthbc, T[x_line - 1, y_line, z_line], T[x_line, y_line, z_line - 1], T[x_line, y_line, z_line], T_surr);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = 0;
                                z_line = 0;
                                y_line = y_line + 1;
                            }
                        }

                    }
                    else if (y_line != 0 && y_line < y_step - 1) 
                    {
                        if (z_line == 0)
                        {
                            if (x_line == 0)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köşe_x0z0(k_cons, dx, dy, dz, T[x_line, y_line - 1, z_line], firstbc, secondbc, T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line]);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = x_line + 1;
                            }
                            else if (x_line != 0 && x_line < x_step - 1)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köprü_z0(k_cons, dx, dy, dz, T[x_line - 1, y_line, z_line], T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line], secondbc, T[x_line, y_line - 1, z_line]);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = x_line + 1;
                            }
                            else if (x_line == x_step - 1)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köşe_xsonz0(thirdbc, k_cons, dx, dy, dz, T[x_line, y_line - 1, z_line], secondbc, T[x_line - 1, y_line, z_line], T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line], T_surr);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = 0;
                                z_line = z_line + 1;
                            }

                        }
                        else if (z_line != 0 && z_line < z_step - 1)
                        {
                            if (x_line == 0)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köprü_x0(k_cons, dx, dy, dz, T[x_line, y_line, z_line - 1], T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line], firstbc, T[x_line, y_line - 1, z_line]);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = x_line + 1;
                            }
                            else if (x_line != 0 && x_line < x_step - 1)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_orta(k_cons, dx, dy, dz, T[x_line - 1, y_line, z_line], T[x_line, y_line, z_line - 1], T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line], T[x_line, y_line - 1, z_line]);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = x_line + 1;
                            }
                            else if (x_line == x_step - 1)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köprü_xson(thirdbc, k_cons, dx, dy, dz, T[x_line - 1, y_line, z_line], T[x_line, y_line, z_line - 1], T_surr, T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line], T[x_line, y_line - 1, z_line]);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = 0;
                                z_line = z_line + 1;
                            }
                        }

                        else if (z_line == z_step - 1)
                        {
                            if (x_line == 0)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köşe_x0zson(k_cons, dx, dy, dz, firstbc, T[x_line, y_line - 1, z_line], fourthbc, T[x_line, y_line, z_line - 1], T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line]);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = x_line + 1;
                            }
                            else if (x_line != 0 && x_line < x_step - 1)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köprü_zson(k_cons, dx, dy, dz, T[x_line - 1, y_line, z_line], T[x_line, y_line, z_line - 1], T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line], fourthbc, T[x_line, y_line - 1, z_line]);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = x_line + 1;
                            }
                            else if (x_line == x_step - 1)
                            {
                                T[x_line, y_line + 1, z_line] = t_next_köşe_xsonzson(thirdbc, k_cons, dx, dy, dz, T[x_line, y_line - 1, z_line], fourthbc, T[x_line - 1, y_line, z_line], T[x_line, y_line, z_line - 1], T[x_line, y_line, z_line], T_surr);
                                //Console.WriteLine("T" + "[" + x_line + "," + (y_line + 1) + "," + z_line + "]" + " sıcaklık değeri");
                                //Console.WriteLine(T[x_line, y_line + 1, z_line]);
                                x_line = 0;
                                z_line = 0;
                                y_line = y_line + 1;
                            }
                        }
                    }

                    else if (y_line == y_step - 1)
                    {
                        if (z_line == 0)
                        {
                            if (x_line == 0)
                            {
                                q_atılan[x_line, z_line] = q_atılan_köşe_x0ysonz0(k_cons, dx, dy, dz, T[x_line, y_line - 1, z_line], firstbc, secondbc, T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line]);
                                conv_atılan[x_line, z_line] = yconv_small_area(dx, dz, fifthbc, T_surr, T[x_line, y_line, z_line]);
                                err[x_line, z_line] = conv_atılan[x_line, z_line] - q_atılan[x_line, z_line];
                                corr[x_line, z_line] = rexx * err[x_line, z_line];
                                T[x_line, 0, z_line] = T[x_line, 0, z_line] - corr[x_line, z_line];
                                x_line = x_line + 1;
                            }
                            else if (x_line == x_step - 1)
                            {
                                q_atılan[x_line, z_line] = q_atılan_köşe_xsonysonz0(thirdbc, k_cons, dx, dy, dz, T[x_line, y_line - 1, z_line], secondbc, T[x_line - 1, y_line, z_line], T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line], T_surr);
                                conv_atılan[x_line, z_line] = yconv_small_area(dx, dz, fifthbc, T_surr, T[x_line, y_line, z_line]);
                                err[x_line, z_line] = conv_atılan[x_line, z_line] - q_atılan[x_line, z_line];
                                corr[x_line, z_line] = rexx * err[x_line, z_line];
                                T[x_line, 0, z_line] = T[x_line, 0, z_line] - corr[x_line, z_line];
                                x_line = 0;
                                z_line = z_line + 1;
                            }
                            else if (x_line != 0 && x_line < x_step - 1)
                            {
                                q_atılan[x_line, z_line] = q_atılan_köprü_ysonz0(k_cons, dx, dy, dz, T[x_line - 1, y_line, z_line], T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line], secondbc, T[x_line, y_line - 1, z_line]);
                                conv_atılan[x_line, z_line] = yconv_medium_area1(dx, dz, fifthbc, T_surr, T[x_line, y_line, z_line]);
                                err[x_line, z_line] = conv_atılan[x_line, z_line] - q_atılan[x_line, z_line];
                                corr[x_line, z_line] = rexx * err[x_line, z_line];
                                T[x_line, 0, z_line] = T[x_line, 0, z_line] - corr[x_line, z_line];
                                x_line = x_line + 1;
                            }
                        }
                        else if (z_line != 0 && z_line < z_step - 1)
                        {
                            if (x_line == 0)
                            {
                                q_atılan[x_line, z_line] = q_atılan_köprü_x0yson(k_cons, dx, dy, dz, T[x_line, y_line, z_line - 1], T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line], firstbc, T[x_line, y_line - 1, z_line]);
                                conv_atılan[x_line, z_line] = yconv_medium_area2(dx, dz, fifthbc, T_surr, T[x_line, y_line, z_line]);
                                err[x_line, z_line] = conv_atılan[x_line, z_line] - q_atılan[x_line, z_line];
                                corr[x_line, z_line] = rexx * err[x_line, z_line];
                                T[x_line, 0, z_line] = T[x_line, 0, z_line] - corr[x_line, z_line];
                                x_line = x_line + 1;
                            }
                            else if (x_line != 0 && x_line < x_step - 1)
                            {
                                q_atılan[x_line, z_line] = q_atılan_orta_yson(k_cons, dx, dy, dz, T[x_line - 1, y_line, z_line], T[x_line, y_line, z_line - 1], T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line], T[x_line, y_line - 1, z_line]);
                                conv_atılan[x_line, z_line] = yconv_large_area(dx, dz, fifthbc, T_surr, T[x_line, y_line, z_line]);
                                err[x_line, z_line] = conv_atılan[x_line, z_line] - q_atılan[x_line, z_line];
                                corr[x_line, z_line] = rexx * err[x_line, z_line];
                                T[x_line, 0, z_line] = T[x_line, 0, z_line] - corr[x_line, z_line];
                                x_line = x_line + 1;
                            }
                            else if (x_line == x_step - 1)
                            {
                                q_atılan[x_line, z_line] = q_atılan_köprü_xsonyson(thirdbc, k_cons, dx, dy, dz, T[x_line - 1, y_line, z_line], T[x_line, y_line, z_line - 1], T_surr, T[x_line, y_line, z_line + 1], T[x_line, y_line, z_line], T[x_line, y_line - 1, z_line]);
                                conv_atılan[x_line, z_line] = yconv_medium_area2(dx, dz, fifthbc, T_surr, T[x_line, y_line, z_line]);
                                err[x_line, z_line] = conv_atılan[x_line, z_line] - q_atılan[x_line, z_line];
                                corr[x_line, z_line] = rexx * err[x_line, z_line];
                                T[x_line, 0, z_line] = T[x_line, 0, z_line] - corr[x_line, z_line];
                                x_line = 0;
                                z_line = z_line + 1;
                            }
                        }
                        else if (z_line == z_step - 1)
                        {
                            if (x_line == 0)
                            {
                                q_atılan[x_line, z_line] = q_atılan_köşe_x0ysonzson(k_cons, dx, dy, dz, firstbc, T[x_line, y_line - 1, z_line], fourthbc, T[x_line, y_line, z_line - 1], T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line]);
                                conv_atılan[x_line, z_line] = yconv_small_area(dx, dz, fifthbc, T_surr, T[x_line, y_line, z_line]);
                                err[x_line, z_line] = conv_atılan[x_line, z_line] - q_atılan[x_line, z_line];
                                corr[x_line, z_line] = rexx * err[x_line, z_line];
                                T[x_line, 0, z_line] = T[x_line, 0, z_line] - corr[x_line, z_line];
                                x_line = x_line + 1;
                            }
                            else if (x_line != 0 && x_line < x_step - 1)
                            {
                                q_atılan[x_line, z_line] = q_atılan_köprü_ysonzson(k_cons, dx, dy, dz, T[x_line - 1, y_line, z_line], T[x_line, y_line, z_line - 1], T[x_line + 1, y_line, z_line], T[x_line, y_line, z_line], fourthbc, T[x_line, y_line - 1, z_line]);
                                conv_atılan[x_line, z_line] = yconv_medium_area1(dx, dz, fifthbc, T_surr, T[x_line, y_line, z_line]);
                                err[x_line, z_line] = conv_atılan[x_line, z_line] - q_atılan[x_line, z_line];
                                corr[x_line, z_line] = rexx * err[x_line, z_line];
                                T[x_line, 0, z_line] = T[x_line, 0, z_line] - corr[x_line, z_line];
                                x_line = x_line + 1;
                            }
                            else if (x_line == x_step - 1)
                            {
                                q_atılan[x_line, z_line] = q_atılan_köşe_xsonysonzson(thirdbc, k_cons, dx, dy, dz, T[x_line, y_line - 1, z_line], fourthbc, T[x_line - 1, y_line, z_line], T[x_line, y_line, z_line - 1], T[x_line, y_line, z_line], T_surr);
                                conv_atılan[x_line, z_line] = yconv_small_area(dx, dz, fifthbc, T_surr, T[x_line, y_line, z_line]);
                                err[x_line, z_line] = conv_atılan[x_line, z_line] - q_atılan[x_line, z_line];
                                corr[x_line, z_line] = rexx * err[x_line, z_line];
                                T[x_line, 0, z_line] = T[x_line, 0, z_line] - corr[x_line, z_line];
                                x_line = x_line + 1;
                                z_line = z_line + 1;
                                y_line = y_line + 1;
                            }
                        }
                    }
                    else if (y_line == y_step)
                    {
                        break;
                    }
                }
                Console.WriteLine("HATA DEĞERİ             "+ err[1, 1]);
                err[1,1] = Math.Abs(err[1,1]);
                if (err[1,1] < min_err)
                {
                    break;
                }
            }

            for (int j = 0; j < y_step; j++)
            {
                for (int i = 0; i < x_step; i++)
                {
                    for (int k = 0; k < z_step; k++)
                    {
                        T[i, j, k] = Math.Round(T[i, j, k], 2);
                        //Console.WriteLine("T" + "[" + i + "," + j + "," + k + "]" + " sıcaklık değeri");
                        Console.WriteLine(T[i, j, k] + "   ");
                    }
                }
            }
            
        }
    }
}